import{_ as a,c as s,o as t,ag as l}from"./chunks/framework.3rGs1wYU.js";const g=JSON.parse('{"title":"Algorithmic Complexity (Murakkablik)","description":"","frontmatter":{},"headers":[],"relativePath":"docs/complexity.md","filePath":"docs/complexity.md"}'),n={name:"docs/complexity.md"};function h(r,i,e,k,p,o){return t(),s("div",null,[...i[0]||(i[0]=[l(`<h1 id="algorithmic-complexity-murakkablik" tabindex="-1">Algorithmic Complexity (Murakkablik) <a class="header-anchor" href="#algorithmic-complexity-murakkablik" aria-label="Permalink to &quot;Algorithmic Complexity (Murakkablik)&quot;">​</a></h1><p>Kompyuter fanida <strong>complexity</strong> — algoritmning tezligi va resurs talabini o‘lchash tushunchasi. U ikkita asosiy turga bo‘linadi:</p><ol><li><p><strong>Time Complexity</strong> (Vaqt murakkabligi)</p><ul><li>Algoritm qancha <strong>bosqich</strong> (operation) bajarishini ko‘rsatadi.</li><li>Asosiy maqsad: algoritm tezligini baholash.</li></ul></li><li><p><strong>Space Complexity</strong> (Xotira murakkabligi)</p><ul><li>Algoritm bajarilishi uchun kerak bo‘ladigan <strong>xotira hajmini</strong> ko‘rsatadi.</li><li>Asosiy maqsad: xotira samaradorligini baholash.</li></ul></li></ol><hr><h2 id="big-o-notatsiya" tabindex="-1">Big O Notatsiya <a class="header-anchor" href="#big-o-notatsiya" aria-label="Permalink to &quot;Big O Notatsiya&quot;">​</a></h2><p>Algoritmlarni baholash uchun odatda <strong>Big O</strong> ishlatiladi. Bu eng yomon holatdagi murakkablikni bildiradi.</p><h3 id="asosiy-murakkablik-turlari" tabindex="-1">Asosiy murakkablik turlari: <a class="header-anchor" href="#asosiy-murakkablik-turlari" aria-label="Permalink to &quot;Asosiy murakkablik turlari:&quot;">​</a></h3><ul><li><strong>O(1)</strong> – doimiy vaqt (constant time)</li><li><strong>O(log n)</strong> – logarifmik vaqt</li><li><strong>O(n)</strong> – chiziqli vaqt</li><li><strong>O(n log n)</strong> – log-chiziqli vaqt</li><li><strong>O(n²)</strong> – kvadratik vaqt</li><li><strong>O(2ⁿ)</strong> – eksponensial vaqt</li></ul><hr><h2 id="misollar" tabindex="-1">Misollar <a class="header-anchor" href="#misollar" aria-label="Permalink to &quot;Misollar&quot;">​</a></h2><h3 id="_1-o-1-–-constant-time" tabindex="-1">1. O(1) – Constant Time <a class="header-anchor" href="#_1-o-1-–-constant-time" aria-label="Permalink to &quot;1. O(1) – Constant Time&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_first_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># doimiy vaqt, n ga bog‘liq emas</span></span></code></pre></div><h3 id="_2-o-n-–-linear-time" tabindex="-1">2. O(n) – Linear Time <a class="header-anchor" href="#_2-o-n-–-linear-time" aria-label="Permalink to &quot;2. O(n) – Linear Time&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print_all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr:   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># barcha elementlarni bosib chiqish</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)</span></span></code></pre></div><h3 id="_3-o-n2-–-quadratic-time" tabindex="-1">3. O(n²) – Quadratic Time <a class="header-anchor" href="#_3-o-n2-–-quadratic-time" aria-label="Permalink to &quot;3. O(n²) – Quadratic Time&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print_pairs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ichma-ich loop</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, j)</span></span></code></pre></div><h3 id="_4-o-log-n-–-logarithmic-time-binary-search" tabindex="-1">4. O(log n) – Logarithmic Time (Binary Search) <a class="header-anchor" href="#_4-o-log-n-–-logarithmic-time-binary-search" aria-label="Permalink to &quot;4. O(log n) – Logarithmic Time (Binary Search)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> binary_search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, target):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    left, right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[mid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[mid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><hr><h2 id="jadval-amaliy-tezlik-solishtirishi" tabindex="-1">Jadval: Amaliy tezlik solishtirishi <a class="header-anchor" href="#jadval-amaliy-tezlik-solishtirishi" aria-label="Permalink to &quot;Jadval: Amaliy tezlik solishtirishi&quot;">​</a></h2><table tabindex="0"><thead><tr><th>N</th><th>O(1)</th><th>O(log n)</th><th>O(n)</th><th>O(n log n)</th><th>O(n²)</th></tr></thead><tbody><tr><td>10</td><td>1</td><td>3</td><td>10</td><td>33</td><td>100</td></tr><tr><td>100</td><td>1</td><td>7</td><td>100</td><td>664</td><td>10,000</td></tr><tr><td>1000</td><td>1</td><td>10</td><td>1000</td><td>9965</td><td>1,000,000</td></tr></tbody></table><hr><h2 id="xulosa" tabindex="-1">Xulosa <a class="header-anchor" href="#xulosa" aria-label="Permalink to &quot;Xulosa&quot;">​</a></h2><ul><li>Har bir algoritmning <strong>tezlik</strong> va <strong>xotira</strong> nuqtai nazaridan samaradorligini baholash muhim.</li><li>Har doim <strong>O(n²)</strong> yoki undan yomon algoritmlardan saqlanish kerak, ayniqsa katta ma’lumotlarda.</li><li><strong>Binary Search, HashMap</strong> kabi samarali usullar tezkor ishlashga yordam beradi.</li></ul>`,24)])])}const y=a(n,[["render",h]]);export{g as __pageData,y as default};
